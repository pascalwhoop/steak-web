/**
 * STEAK
 * Kantinen-API
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';


import * as models                                           from '../model/models';
import {Configuration} from "../configuration";
import {BASE_PATH} from "../variables";


/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class OffersApi {
    public basePath = BASE_PATH;
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * OfferDELETE
     * Deletes the Offer specified by the ID in the path
     * @param username The username of the user that is performing the request
     * @param offerid The ID for the offer, given by the DB
     */
    public offerDelete(username: string, offerid: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.offerDeleteWithHttpInfo(username, offerid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Offer[]
     * ...
     * @param username The username of the user that is performing the request
     * @param date 
     * @param startdate 
     * @param enddate 
     */
    public offerGet(username: string, date?: Date, startdate?: Date, enddate?: Date, extraHttpRequestParams?: any): Observable<Array<models.Offer>> {
        return this.offerGetWithHttpInfo(username, date, startdate, enddate, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Offer
     * ...
     * @param username The username of the user that is performing the request
     * @param offerid The ID for the offer, given by the DB
     */
    public offerGetOne(username: string, offerid: string, extraHttpRequestParams?: any): Observable<models.Offer> {
        return this.offerGetOneWithHttpInfo(username, offerid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create new Offer
     * ...
     * @param username The username of the user that is performing the request
     * @param offerData ...
     */
    public offerPUT(username: string, offerData: models.Offer, extraHttpRequestParams?: any): Observable<models.Offer> {
        return this.offerPUTWithHttpInfo(username, offerData, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * OfferPOST
     * Updates the Offer specified by the ID in the path
     * @param username The username of the user that is performing the request
     * @param offerid The ID for the offer, given by the DB
     */
    public offerPost(username: string, offerid: string, extraHttpRequestParams?: any): Observable<models.Offer> {
        return this.offerPostWithHttpInfo(username, offerid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * OfferDELETE
     * Deletes the Offer specified by the ID in the path
     * @param username The username of the user that is performing the request
     * @param offerid The ID for the offer, given by the DB
     */
    public offerDeleteWithHttpInfo(username: string, offerid: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/offers/${offerid}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling offerDelete.');
        }
        // verify required parameter 'offerid' is not null or undefined
        if (offerid === null || offerid === undefined) {
            throw new Error('Required parameter offerid was null or undefined when calling offerDelete.');
        }
        headers.set('username', String(username));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Offer[]
     * ...
     * @param username The username of the user that is performing the request
     * @param date 
     * @param startdate 
     * @param enddate 
     */
    public offerGetWithHttpInfo(username: string, date?: Date, startdate?: Date, enddate?: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/offers`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling offerGet.');
        }
        if (date !== undefined) {
            if(date instanceof Date) {
                queryParameters.set('date', <any>date.toISOString());
            } else {
                queryParameters.set('date', <any>date);
            }
        }

        if (startdate !== undefined) {
            if(startdate instanceof Date) {
                queryParameters.set('startdate', <any>startdate.toISOString());
            } else {
                queryParameters.set('startdate', <any>startdate);
            }
        }

        if (enddate !== undefined) {
            if(enddate instanceof Date) {
                queryParameters.set('enddate', <any>enddate.toISOString());
            } else {
                queryParameters.set('enddate', <any>enddate);
            }
        }

        headers.set('username', String(username));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Offer
     * ...
     * @param username The username of the user that is performing the request
     * @param offerid The ID for the offer, given by the DB
     */
    public offerGetOneWithHttpInfo(username: string, offerid: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/offers/${offerid}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling offerGetOne.');
        }
        // verify required parameter 'offerid' is not null or undefined
        if (offerid === null || offerid === undefined) {
            throw new Error('Required parameter offerid was null or undefined when calling offerGetOne.');
        }
        headers.set('username', String(username));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create new Offer
     * ...
     * @param username The username of the user that is performing the request
     * @param offerData ...
     */
    public offerPUTWithHttpInfo(username: string, offerData: models.Offer, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/offers`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling offerPUT.');
        }
        // verify required parameter 'offerData' is not null or undefined
        if (offerData === null || offerData === undefined) {
            throw new Error('Required parameter offerData was null or undefined when calling offerPUT.');
        }
        headers.set('username', String(username));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: offerData == null ? '' : JSON.stringify(offerData), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * OfferPOST
     * Updates the Offer specified by the ID in the path
     * @param username The username of the user that is performing the request
     * @param offerid The ID for the offer, given by the DB
     */
    public offerPostWithHttpInfo(username: string, offerid: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/offers/${offerid}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling offerPost.');
        }
        // verify required parameter 'offerid' is not null or undefined
        if (offerid === null || offerid === undefined) {
            throw new Error('Required parameter offerid was null or undefined when calling offerPost.');
        }
        headers.set('username', String(username));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
