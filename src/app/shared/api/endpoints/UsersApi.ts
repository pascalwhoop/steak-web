/**
 * STEAK
 * Kantinen-API
 *
 * OpenAPI spec version: 0.0.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import {Injectable} from "@angular/core";
import {Http, RequestMethod, RequestOptions, RequestOptionsArgs, Response, URLSearchParams} from "@angular/http";
import {Observable} from "rxjs/Observable";
import "rxjs/add/operator/map";
import * as models from "../../model/models";
import {environment} from "../../../../environments/environment";
import {User} from "../../model/User";

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class UsersApi {

    public basePath = environment.endpoints.HOST + environment.endpoints.STEAK_BASE_URI;

    constructor(protected http: Http) {
    }

    /**
     * User Profile
     * Gibt das Benutzerprofil zurueck
     */
    public meGET(): Observable <User> {
        const path = this.basePath + `/me`;

        return this.http.get(path)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * OfferOrdersPair[]
     * Returns an array of offer and orders pairs. Each element is an offer plus a list of all the orders for a specific user
     * @param useridpath The user id for which to fetch data
     * @param datepath
     */
    public offersOrdersGET(useridpath: string, datepath: Date): Observable < Array < models.OfferOrdersPair >> {
        let dateString = datepath.toISOString().slice(0,10);
        const path = this.basePath + `/users/${useridpath}/offersordersoverview/date/${dateString}`;


        // verify required parameter 'useridpath' is not null or undefined
        if (useridpath === null || useridpath === undefined) {
            throw new Error('Required parameter useridpath was null or undefined when calling offersOrdersGET.');
        }
        // verify required parameter 'datepath' is not null or undefined
        if (datepath === null || datepath === undefined) {
            throw new Error('Required parameter datepath was null or undefined when calling offersOrdersGET.');
        }

        return this.http.get(path)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * User
     * Returns the User Object

     * @param useridpath The user id for which to fetch data
     */
    public userGet(useridpath: string): Observable < models.User > {
        const path = this.basePath + `/users/${useridpath}`;

        // verify required parameter 'useridpath' is not null or undefined
        if (useridpath === null || useridpath === undefined) {
            throw new Error('Required parameter useridpath was null or undefined when calling userGet.');
        }

        return this.http.request(path)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * User[]
     * Returns a list of user objects
     * @param openPayments A flag that can be set to true to only get employees with open payments
     */
    public userGetMany(openPayments ?: boolean): Observable < Array < models.User >> {
        const path = this.basePath + `/users`;

        let queryParameters = new URLSearchParams();

        if (openPayments !== undefined) {
            queryParameters.set('open_payments', <any>openPayments);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            search: queryParameters
        });


        return this.http.get(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


}
