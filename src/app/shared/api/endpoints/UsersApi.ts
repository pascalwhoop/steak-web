/**
 * STEAK
 * Kantinen-API
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import {Configuration} from "../configuration";
import {BASE_PATH} from "../variables";

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class UsersApi {
    protected basePath = 'https://10.100.175.13:443/v0.2';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * User Profile
     * Gibt das Benutzerprofil zurueck
     * @param username The username of the user that is performing the request
     */
    public meGET(username: string, extraHttpRequestParams?: any): Observable<models.User> {
        return this.meGETWithHttpInfo(username, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * OfferOrdersPair[]
     * Returns an array of offer and orders pairs. Each element is an offer plus a list of all the orders for a specific user
     * @param username The username of the user that is performing the request
     * @param useridpath The user id for which to fetch data
     * @param datepath 
     */
    public offersOrdersGET(username: string, useridpath: string, datepath: Date, extraHttpRequestParams?: any): Observable<Array<models.OfferOrdersPair>> {
        return this.offersOrdersGETWithHttpInfo(username, useridpath, datepath, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * User
     * Returns the User Object
     * @param username The username of the user that is performing the request
     * @param useridpath The user id for which to fetch data
     */
    public userGet(username: string, useridpath: string, extraHttpRequestParams?: any): Observable<models.User> {
        return this.userGetWithHttpInfo(username, useridpath, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * User[]
     * Returns a list of user objects
     * @param username The username of the user that is performing the request
     * @param openPayments A flag that can be set to true to only get employees with open payments
     */
    public userGetMany(username: string, openPayments?: boolean, extraHttpRequestParams?: any): Observable<Array<models.User>> {
        return this.userGetManyWithHttpInfo(username, openPayments, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * User Profile
     * Gibt das Benutzerprofil zurueck
     * @param username The username of the user that is performing the request
     */
    public meGETWithHttpInfo(username: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/me`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling meGET.');
        }
        headers.set('username', String(username));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * OfferOrdersPair[]
     * Returns an array of offer and orders pairs. Each element is an offer plus a list of all the orders for a specific user
     * @param username The username of the user that is performing the request
     * @param useridpath The user id for which to fetch data
     * @param datepath 
     */
    public offersOrdersGETWithHttpInfo(username: string, useridpath: string, datepath: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/users/${useridpath}/offersordersoverview/date/${datepath}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling offersOrdersGET.');
        }
        // verify required parameter 'useridpath' is not null or undefined
        if (useridpath === null || useridpath === undefined) {
            throw new Error('Required parameter useridpath was null or undefined when calling offersOrdersGET.');
        }
        // verify required parameter 'datepath' is not null or undefined
        if (datepath === null || datepath === undefined) {
            throw new Error('Required parameter datepath was null or undefined when calling offersOrdersGET.');
        }
        headers.set('username', String(username));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * User
     * Returns the User Object
     * @param username The username of the user that is performing the request
     * @param useridpath The user id for which to fetch data
     */
    public userGetWithHttpInfo(username: string, useridpath: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/users/${useridpath}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling userGet.');
        }
        // verify required parameter 'useridpath' is not null or undefined
        if (useridpath === null || useridpath === undefined) {
            throw new Error('Required parameter useridpath was null or undefined when calling userGet.');
        }
        headers.set('username', String(username));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * User[]
     * Returns a list of user objects
     * @param username The username of the user that is performing the request
     * @param openPayments A flag that can be set to true to only get employees with open payments
     */
    public userGetManyWithHttpInfo(username: string, openPayments?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/users`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling userGetMany.');
        }
        if (openPayments !== undefined) {
                queryParameters.set('open_payments', <any>openPayments);
        }

        headers.set('username', String(username));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
